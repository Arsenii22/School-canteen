import logging
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import config
import json

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class Form(StatesGroup):
    school = State() # –®–∫–æ–ª–∞
    like = State() # –ù—Ä–∞–≤–∏—Ç—Å—è –µ–¥–∞ –∏–ª–∏ –Ω–µ—Ç
    opinion = State() # –ß—Ç–æ –±–æ–ª—å—à–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å / –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å
    rate = State() # –û—Ü–µ–Ω–∫–∞ –ø–æ 10 –±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ

    
@dp.message_handler(commands="start")
async def start(msg: types.Message):
    await Form.school.set()

    await msg.answer_sticker(r"CAACAgIAAxkBAAEZdOdjXSEK1qpOmYrvcQoD3riSA_4zRgACXgYAAlOx9wNkYNhH9eEsgyoE")
    await msg.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ —É–ª—å—Ç—Ä–∞-–º–µ–≥–∞-—Å—É–ø–µ—Ä-–ø—É–ø–µ—Ä-–±–æ—Ç–µ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–æ–ª–æ–≤—ã–µ –≤ —à–∫–æ–ª–∞—Ö")
    await msg.answer("–ù–µ –≤–æ–ª–Ω—É–π—Å—è, —ç—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω–æ :)")
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —à–∫–æ–ª—É:")

@dp.message_handler(state=Form.school)
async def get_school(msg: types.Message, state: FSMContext):
    await msg.reply(f"–í–∞—à–∞ —à–∫–æ–ª–∞: {msg.text}", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–î–∞", callback_data="yes")).add(InlineKeyboardButton("–ù–µ—Ç", callback_data="no")))

@dp.callback_query_handler(text="yes", state=Form.all_states)
@dp.callback_query_handler(text="no", state=Form.all_states)
async def answers(query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(query.id)

    if query.data == "yes" and query.message.text.startswith("–í–∞—à–∞ —à–∫–æ–ª–∞:"):
        async with state.proxy() as data:
            data["school"] = query.message.text.replace("–í–∞—à–∞ —à–∫–æ–ª–∞: ", "")
        await Form.next()

        await query.message.edit_reply_markup()
        await query.message.reply("–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –≤–∞–º –µ–¥–∞ –≤ —à–∫–æ–ª—å–Ω–æ–π —Å—Ç–æ–ª–æ–≤–æ–π?", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–î–∞", callback_data="yes")).add(InlineKeyboardButton("–ù–µ—Ç", callback_data="no")))

    elif query.data == "no" and query.message.text.startswith("–í–∞—à–∞ —à–∫–æ–ª–∞:"):
        await query.message.edit_reply_markup()
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —à–∫–æ–ª—É:")

    elif query.data == "yes" and query.message.text == "–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –≤–∞–º –µ–¥–∞ –≤ —à–∫–æ–ª—å–Ω–æ–π —Å—Ç–æ–ª–æ–≤–æ–π?":
        async with state.proxy() as data:
            data["like"] = True
        await Form.next()

        await query.message.edit_reply_markup()
        await query.message.reply("–ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–°–≤–µ–∂–∞—è –µ–¥–∞", callback_data="opinion_fresh")).add(InlineKeyboardButton("–û—á–µ–Ω—å –≤–∫—É—Å–Ω–æ", callback_data="opinion_vkusno")).add(InlineKeyboardButton("–û—á–µ–Ω—å –æ—á–µ–Ω—å –≤–∫—É—Å–Ω–æ", callback_data="opinion_very_vkusno")).add(InlineKeyboardButton("–û—á–µ–Ω—å –æ—á–µ–Ω—å –æ—á–µ–Ω—å –≤–∫—É—Å–Ω–æ", callback_data="opinion_very_very_vkusno")))

    elif query.data == "no" and query.message.text == "–ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ –≤–∞–º –µ–¥–∞ –≤ —à–∫–æ–ª—å–Ω–æ–π —Å—Ç–æ–ª–æ–≤–æ–π?":
        async with state.proxy() as data:
            data["like"] = False
        await Form.next()

        await query.message.reply("–ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("–ù–ï –°–≤–µ–∂–∞—è –µ–¥–∞", callback_data="opinion_not_fresh")).add(InlineKeyboardButton("–ù–ï –û—á–µ–Ω—å –≤–∫—É—Å–Ω–æ", callback_data="opinion_not_vkusno")).add(InlineKeyboardButton("–ù–ï –û—á–µ–Ω—å –æ—á–µ–Ω—å –≤–∫—É—Å–Ω–æ", callback_data="opinion_not_very_vkusno")).add(InlineKeyboardButton("–ù–ï –û—á–µ–Ω—å –æ—á–µ–Ω—å –æ—á–µ–Ω—å –≤–∫—É—Å–Ω–æ", callback_data="opinion_not_very_very_vkusno")))


@dp.callback_query_handler(lambda c: c.data.startswith("opinion_"), state=Form.all_states)
async def answers_continue(query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["opinion"] = query.data
    await Form.next()

    await query.message.reply("–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –µ–¥—ã –ø–æ 10 –±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ", reply_markup=ReplyKeyboardMarkup().add(KeyboardButton("1Ô∏è‚É£")).add(KeyboardButton("2Ô∏è‚É£")).add(KeyboardButton("3Ô∏è‚É£")).add(KeyboardButton("4Ô∏è‚É£")).add(KeyboardButton("5Ô∏è‚É£")).add(KeyboardButton("6Ô∏è‚É£")).add(KeyboardButton("7Ô∏è‚É£")).add(KeyboardButton("8Ô∏è‚É£")).add(KeyboardButton("9Ô∏è‚É£")).add(KeyboardButton("üîü")))

@dp.message_handler(lambda t: t.text in "1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£4Ô∏è‚É£5Ô∏è‚É£6Ô∏è‚É£7Ô∏è‚É£8Ô∏è‚É£9Ô∏è‚É£üîü", state=Form.all_states)
async def get_rate(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["rate"] = {"1Ô∏è‚É£": 1, "2Ô∏è‚É£": 2, "3Ô∏è‚É£": 3, "4Ô∏è‚É£": 4, "5Ô∏è‚É£": 5, "6Ô∏è‚É£": 6, "7Ô∏è‚É£": 7, "8Ô∏è‚É£": 8, "9Ô∏è‚É£": 9, "üîü": 10}[msg.text]

        await msg.reply(str(data))
        await msg.answer(reply_markup=ReplyKeyboardRemove())
    
    
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp)